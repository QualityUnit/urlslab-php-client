<?php
/**
 * DomainScheduleScheduleConf
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * URLSLAB API
 *
 * optimize your website with SEO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DomainScheduleScheduleConf Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainScheduleScheduleConf implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'domain.schedule.ScheduleConf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'urls' => 'string[]',
'link_following_strategy' => 'int',
'sitemaps' => 'string[]',
'all_sitemaps' => 'bool',
'take_screenshot' => 'bool',
'fetch_text' => 'bool',
'scan_speed_per_minute' => 'int',
'scan_frequency' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'urls' => null,
'link_following_strategy' => 'int32',
'sitemaps' => null,
'all_sitemaps' => null,
'take_screenshot' => null,
'fetch_text' => null,
'scan_speed_per_minute' => 'int32',
'scan_frequency' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'urls' => 'urls',
'link_following_strategy' => 'linkFollowingStrategy',
'sitemaps' => 'sitemaps',
'all_sitemaps' => 'allSitemaps',
'take_screenshot' => 'takeScreenshot',
'fetch_text' => 'fetchText',
'scan_speed_per_minute' => 'scanSpeedPerMinute',
'scan_frequency' => 'scanFrequency'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'urls' => 'setUrls',
'link_following_strategy' => 'setLinkFollowingStrategy',
'sitemaps' => 'setSitemaps',
'all_sitemaps' => 'setAllSitemaps',
'take_screenshot' => 'setTakeScreenshot',
'fetch_text' => 'setFetchText',
'scan_speed_per_minute' => 'setScanSpeedPerMinute',
'scan_frequency' => 'setScanFrequency'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'urls' => 'getUrls',
'link_following_strategy' => 'getLinkFollowingStrategy',
'sitemaps' => 'getSitemaps',
'all_sitemaps' => 'getAllSitemaps',
'take_screenshot' => 'getTakeScreenshot',
'fetch_text' => 'getFetchText',
'scan_speed_per_minute' => 'getScanSpeedPerMinute',
'scan_frequency' => 'getScanFrequency'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SCAN_FREQUENCY_ONE_TIME = 'ONE_TIME';
const SCAN_FREQUENCY_YEARLY = 'YEARLY';
const SCAN_FREQUENCY_DAILY = 'DAILY';
const SCAN_FREQUENCY_WEEKLY = 'WEEKLY';
const SCAN_FREQUENCY_HOURLY = 'HOURLY';
const SCAN_FREQUENCY_MONTHLY = 'MONTHLY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScanFrequencyAllowableValues()
    {
        return [
            self::SCAN_FREQUENCY_ONE_TIME,
self::SCAN_FREQUENCY_YEARLY,
self::SCAN_FREQUENCY_DAILY,
self::SCAN_FREQUENCY_WEEKLY,
self::SCAN_FREQUENCY_HOURLY,
self::SCAN_FREQUENCY_MONTHLY,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['urls'] = isset($data['urls']) ? $data['urls'] : null;
        $this->container['link_following_strategy'] = isset($data['link_following_strategy']) ? $data['link_following_strategy'] : null;
        $this->container['sitemaps'] = isset($data['sitemaps']) ? $data['sitemaps'] : null;
        $this->container['all_sitemaps'] = isset($data['all_sitemaps']) ? $data['all_sitemaps'] : null;
        $this->container['take_screenshot'] = isset($data['take_screenshot']) ? $data['take_screenshot'] : null;
        $this->container['fetch_text'] = isset($data['fetch_text']) ? $data['fetch_text'] : null;
        $this->container['scan_speed_per_minute'] = isset($data['scan_speed_per_minute']) ? $data['scan_speed_per_minute'] : null;
        $this->container['scan_frequency'] = isset($data['scan_frequency']) ? $data['scan_frequency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['urls'] === null) {
            $invalidProperties[] = "'urls' can't be null";
        }
        if ($this->container['link_following_strategy'] === null) {
            $invalidProperties[] = "'link_following_strategy' can't be null";
        }
        if ($this->container['sitemaps'] === null) {
            $invalidProperties[] = "'sitemaps' can't be null";
        }
        if ($this->container['all_sitemaps'] === null) {
            $invalidProperties[] = "'all_sitemaps' can't be null";
        }
        if ($this->container['take_screenshot'] === null) {
            $invalidProperties[] = "'take_screenshot' can't be null";
        }
        if ($this->container['fetch_text'] === null) {
            $invalidProperties[] = "'fetch_text' can't be null";
        }
        if ($this->container['scan_speed_per_minute'] === null) {
            $invalidProperties[] = "'scan_speed_per_minute' can't be null";
        }
        if ($this->container['scan_frequency'] === null) {
            $invalidProperties[] = "'scan_frequency' can't be null";
        }
        $allowedValues = $this->getScanFrequencyAllowableValues();
        if (!is_null($this->container['scan_frequency']) && !in_array($this->container['scan_frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'scan_frequency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets urls
     *
     * @return string[]
     */
    public function getUrls()
    {
        return $this->container['urls'];
    }

    /**
     * Sets urls
     *
     * @param string[] $urls urls
     *
     * @return $this
     */
    public function setUrls($urls)
    {
        $this->container['urls'] = $urls;

        return $this;
    }

    /**
     * Gets link_following_strategy
     *
     * @return int
     */
    public function getLinkFollowingStrategy()
    {
        return $this->container['link_following_strategy'];
    }

    /**
     * Sets link_following_strategy
     *
     * @param int $link_following_strategy link_following_strategy
     *
     * @return $this
     */
    public function setLinkFollowingStrategy($link_following_strategy)
    {
        $this->container['link_following_strategy'] = $link_following_strategy;

        return $this;
    }

    /**
     * Gets sitemaps
     *
     * @return string[]
     */
    public function getSitemaps()
    {
        return $this->container['sitemaps'];
    }

    /**
     * Sets sitemaps
     *
     * @param string[] $sitemaps sitemaps
     *
     * @return $this
     */
    public function setSitemaps($sitemaps)
    {
        $this->container['sitemaps'] = $sitemaps;

        return $this;
    }

    /**
     * Gets all_sitemaps
     *
     * @return bool
     */
    public function getAllSitemaps()
    {
        return $this->container['all_sitemaps'];
    }

    /**
     * Sets all_sitemaps
     *
     * @param bool $all_sitemaps all_sitemaps
     *
     * @return $this
     */
    public function setAllSitemaps($all_sitemaps)
    {
        $this->container['all_sitemaps'] = $all_sitemaps;

        return $this;
    }

    /**
     * Gets take_screenshot
     *
     * @return bool
     */
    public function getTakeScreenshot()
    {
        return $this->container['take_screenshot'];
    }

    /**
     * Sets take_screenshot
     *
     * @param bool $take_screenshot take_screenshot
     *
     * @return $this
     */
    public function setTakeScreenshot($take_screenshot)
    {
        $this->container['take_screenshot'] = $take_screenshot;

        return $this;
    }

    /**
     * Gets fetch_text
     *
     * @return bool
     */
    public function getFetchText()
    {
        return $this->container['fetch_text'];
    }

    /**
     * Sets fetch_text
     *
     * @param bool $fetch_text fetch_text
     *
     * @return $this
     */
    public function setFetchText($fetch_text)
    {
        $this->container['fetch_text'] = $fetch_text;

        return $this;
    }

    /**
     * Gets scan_speed_per_minute
     *
     * @return int
     */
    public function getScanSpeedPerMinute()
    {
        return $this->container['scan_speed_per_minute'];
    }

    /**
     * Sets scan_speed_per_minute
     *
     * @param int $scan_speed_per_minute scan_speed_per_minute
     *
     * @return $this
     */
    public function setScanSpeedPerMinute($scan_speed_per_minute)
    {
        $this->container['scan_speed_per_minute'] = $scan_speed_per_minute;

        return $this;
    }

    /**
     * Gets scan_frequency
     *
     * @return string
     */
    public function getScanFrequency()
    {
        return $this->container['scan_frequency'];
    }

    /**
     * Sets scan_frequency
     *
     * @param string $scan_frequency scan_frequency
     *
     * @return $this
     */
    public function setScanFrequency($scan_frequency)
    {
        $allowedValues = $this->getScanFrequencyAllowableValues();
        if (!in_array($scan_frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'scan_frequency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scan_frequency'] = $scan_frequency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
