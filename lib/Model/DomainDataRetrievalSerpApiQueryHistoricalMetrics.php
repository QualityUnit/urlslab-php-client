<?php
/**
 * DomainDataRetrievalSerpApiQueryHistoricalMetrics
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * URLSLAB API
 *
 * optimize your website with SEO
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DomainDataRetrievalSerpApiQueryHistoricalMetrics Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DomainDataRetrievalSerpApiQueryHistoricalMetrics implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'domain.dataRetrieval.SerpApiQueryHistoricalMetrics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'competition_index' => 'int',
        'competition_level' => 'string',
        'avg_monthly_searches' => 'int',
        'low_top_of_page_bid_micros' => 'int',
        'high_top_of_page_bid_micros' => 'int',
        'avg_cpc_micros' => 'int',
        'monthly_search_volumes' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'competition_index' => 'int64',
        'competition_level' => null,
        'avg_monthly_searches' => 'int64',
        'low_top_of_page_bid_micros' => 'int64',
        'high_top_of_page_bid_micros' => 'int64',
        'avg_cpc_micros' => 'int64',
        'monthly_search_volumes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'competition_index' => true,
		'competition_level' => true,
		'avg_monthly_searches' => true,
		'low_top_of_page_bid_micros' => true,
		'high_top_of_page_bid_micros' => true,
		'avg_cpc_micros' => true,
		'monthly_search_volumes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'competition_index' => 'competitionIndex',
        'competition_level' => 'competitionLevel',
        'avg_monthly_searches' => 'avgMonthlySearches',
        'low_top_of_page_bid_micros' => 'lowTopOfPageBidMicros',
        'high_top_of_page_bid_micros' => 'highTopOfPageBidMicros',
        'avg_cpc_micros' => 'avgCpcMicros',
        'monthly_search_volumes' => 'monthlySearchVolumes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'competition_index' => 'setCompetitionIndex',
        'competition_level' => 'setCompetitionLevel',
        'avg_monthly_searches' => 'setAvgMonthlySearches',
        'low_top_of_page_bid_micros' => 'setLowTopOfPageBidMicros',
        'high_top_of_page_bid_micros' => 'setHighTopOfPageBidMicros',
        'avg_cpc_micros' => 'setAvgCpcMicros',
        'monthly_search_volumes' => 'setMonthlySearchVolumes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'competition_index' => 'getCompetitionIndex',
        'competition_level' => 'getCompetitionLevel',
        'avg_monthly_searches' => 'getAvgMonthlySearches',
        'low_top_of_page_bid_micros' => 'getLowTopOfPageBidMicros',
        'high_top_of_page_bid_micros' => 'getHighTopOfPageBidMicros',
        'avg_cpc_micros' => 'getAvgCpcMicros',
        'monthly_search_volumes' => 'getMonthlySearchVolumes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('competition_index', $data ?? [], null);
        $this->setIfExists('competition_level', $data ?? [], null);
        $this->setIfExists('avg_monthly_searches', $data ?? [], null);
        $this->setIfExists('low_top_of_page_bid_micros', $data ?? [], null);
        $this->setIfExists('high_top_of_page_bid_micros', $data ?? [], null);
        $this->setIfExists('avg_cpc_micros', $data ?? [], null);
        $this->setIfExists('monthly_search_volumes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['monthly_search_volumes'] === null) {
            $invalidProperties[] = "'monthly_search_volumes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets competition_index
     *
     * @return int|null
     */
    public function getCompetitionIndex()
    {
        return $this->container['competition_index'];
    }

    /**
     * Sets competition_index
     *
     * @param int|null $competition_index competition_index
     *
     * @return self
     */
    public function setCompetitionIndex($competition_index)
    {
        if (is_null($competition_index)) {
            array_push($this->openAPINullablesSetToNull, 'competition_index');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('competition_index', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['competition_index'] = $competition_index;

        return $this;
    }

    /**
     * Gets competition_level
     *
     * @return string|null
     */
    public function getCompetitionLevel()
    {
        return $this->container['competition_level'];
    }

    /**
     * Sets competition_level
     *
     * @param string|null $competition_level competition_level
     *
     * @return self
     */
    public function setCompetitionLevel($competition_level)
    {
        if (is_null($competition_level)) {
            array_push($this->openAPINullablesSetToNull, 'competition_level');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('competition_level', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['competition_level'] = $competition_level;

        return $this;
    }

    /**
     * Gets avg_monthly_searches
     *
     * @return int|null
     */
    public function getAvgMonthlySearches()
    {
        return $this->container['avg_monthly_searches'];
    }

    /**
     * Sets avg_monthly_searches
     *
     * @param int|null $avg_monthly_searches avg_monthly_searches
     *
     * @return self
     */
    public function setAvgMonthlySearches($avg_monthly_searches)
    {
        if (is_null($avg_monthly_searches)) {
            array_push($this->openAPINullablesSetToNull, 'avg_monthly_searches');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avg_monthly_searches', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avg_monthly_searches'] = $avg_monthly_searches;

        return $this;
    }

    /**
     * Gets low_top_of_page_bid_micros
     *
     * @return int|null
     */
    public function getLowTopOfPageBidMicros()
    {
        return $this->container['low_top_of_page_bid_micros'];
    }

    /**
     * Sets low_top_of_page_bid_micros
     *
     * @param int|null $low_top_of_page_bid_micros low_top_of_page_bid_micros
     *
     * @return self
     */
    public function setLowTopOfPageBidMicros($low_top_of_page_bid_micros)
    {
        if (is_null($low_top_of_page_bid_micros)) {
            array_push($this->openAPINullablesSetToNull, 'low_top_of_page_bid_micros');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('low_top_of_page_bid_micros', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['low_top_of_page_bid_micros'] = $low_top_of_page_bid_micros;

        return $this;
    }

    /**
     * Gets high_top_of_page_bid_micros
     *
     * @return int|null
     */
    public function getHighTopOfPageBidMicros()
    {
        return $this->container['high_top_of_page_bid_micros'];
    }

    /**
     * Sets high_top_of_page_bid_micros
     *
     * @param int|null $high_top_of_page_bid_micros high_top_of_page_bid_micros
     *
     * @return self
     */
    public function setHighTopOfPageBidMicros($high_top_of_page_bid_micros)
    {
        if (is_null($high_top_of_page_bid_micros)) {
            array_push($this->openAPINullablesSetToNull, 'high_top_of_page_bid_micros');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('high_top_of_page_bid_micros', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['high_top_of_page_bid_micros'] = $high_top_of_page_bid_micros;

        return $this;
    }

    /**
     * Gets avg_cpc_micros
     *
     * @return int|null
     */
    public function getAvgCpcMicros()
    {
        return $this->container['avg_cpc_micros'];
    }

    /**
     * Sets avg_cpc_micros
     *
     * @param int|null $avg_cpc_micros avg_cpc_micros
     *
     * @return self
     */
    public function setAvgCpcMicros($avg_cpc_micros)
    {
        if (is_null($avg_cpc_micros)) {
            array_push($this->openAPINullablesSetToNull, 'avg_cpc_micros');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avg_cpc_micros', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avg_cpc_micros'] = $avg_cpc_micros;

        return $this;
    }

    /**
     * Gets monthly_search_volumes
     *
     * @return object[]
     */
    public function getMonthlySearchVolumes()
    {
        return $this->container['monthly_search_volumes'];
    }

    /**
     * Sets monthly_search_volumes
     *
     * @param object[] $monthly_search_volumes monthly_search_volumes
     *
     * @return self
     */
    public function setMonthlySearchVolumes($monthly_search_volumes)
    {
        if (is_null($monthly_search_volumes)) {
            throw new \InvalidArgumentException('non-nullable monthly_search_volumes cannot be null');
        }
        $this->container['monthly_search_volumes'] = $monthly_search_volumes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


